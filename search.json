[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jaelon Braxton",
    "section": "",
    "text": "Data science is my trade. This is Jaelon’s data scientist website."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "EPPS6302.html",
    "href": "EPPS6302.html",
    "title": "Jaelon Braxton",
    "section": "",
    "text": "This is my first assignment!\n\ninstall.packages(\"gtrendsR\")\nlibrary(gtrendsR)\nBidenTrumpElection = gtrends(c(\"Trump\",\"Biden\",\"election\"), time = \"all\")\npar(family=\"Georgia\")\nplot(BidenTrumpElection)\ntg = gtrends(\"transgender\", time = \"all\")\n\n# Example: Transgender, Feminism and Women's rights\n# \nplot(gtrends(c(\"transgender\"), time = \"all\"))\ndata(\"countries\")\nplot(gtrends(c(\"transgender\"), geo = \"GB\", time = \"all\")) \nplot(gtrends(c(\"transgender\"), geo = c(\"US\",\"GB\",\"TW\"), time = \"all\")) \ntg_iot = tg$interest_over_time\ntw = gtrends(c(\"transgender\",\"women right\"), time = \"all\")\ntw1 = data.frame(tw$interest_over_time)\nplot(gtrends(c(\"transgender\",\"women right\",\"feminism\"), time = \"all\"))\ndata(\"categories\")"
  },
  {
    "objectID": "EPPS6356.html",
    "href": "EPPS6356.html",
    "title": "Jaelon Braxton",
    "section": "",
    "text": "# Title Fall color\n# Credit: https://fronkonstin.com\n\n# Install packages\n\n# install.packages(\"gsubfn\")\n# nstall.packages(\"tidyverse\")\nlibrary(gsubfn)\n\nLoading required package: proto\n\nlibrary(tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Define elements in plant art\n# Each image corresponds to a different axiom, rules, angle and depth\n\n# Leaf of Fall\n\naxiom=\"X\"\nrules=list(\"X\"=\"F-[[X]+X]+F[+FX]-X\", \"F\"=\"FF\")\nangle=22.5\ndepth=6\n\ny=1\nx=1\nfor (i in 1:depth) axiom=gsubfn(\".\", rules, axiom)\n\nactions=str_extract_all(axiom, \"\\\\d*\\\\+|\\\\d*\\\\-|F|L|R|\\\\[|\\\\]|\\\\|\") %&gt;% unlist\n\nstatus=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))\npoints=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)\n\n\n# Generating data\n# Note: may take a minute or two\n\nfor (action in actions)\n{\n  if (action==\"F\")\n  {\n    x=points[1, \"x1\"]+cos(points[1, \"alfa\"]*(pi/180+(y+(y/x))))\n    y=points[1, \"y1\"]+sin(points[1, \"alfa\"]*(pi/180))\n    points[1,\"x2\"]=x\n    points[1,\"y2\"]=y\n    data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,\n               alfa=points[1, \"alfa\"],\n               depth=points[1,\"depth\"]) %&gt;% rbind(points)-&gt;points\n  }\n  if (action %in% c(\"+\", \"-\")){\n    alfa=points[1, \"alfa\"]\n    points[1, \"alfa\"]=eval(parse(text=paste0(\"alfa\",action, angle)))\n  }\n  if(action==\"[\"){\n    data.frame(x=points[1, \"x1\"], y=points[1, \"y1\"], alfa=points[1, \"alfa\"]) %&gt;%\n      rbind(status) -&gt; status\n    points[1, \"depth\"]=points[1, \"depth\"]+1\n  }\n  \n  if(action==\"]\"){\n    depth=points[1, \"depth\"]\n    points[-1,]-&gt;points\n    data.frame(x1=status[1, \"x\"], y1=status[1, \"y\"], x2=NA, y2=NA,\n               alfa=status[1, \"alfa\"],\n               depth=depth-1) %&gt;%\n      rbind(points) -&gt; points\n    status[-1,]-&gt;status\n  }\n}\n\nggplot() +\n  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),\n               lineend = \"round\",\n               color = \"orange\", # Set your own Fall color?\n               data=na.omit(points)) +\n  coord_fixed(ratio = .2) +\n  theme_void() # No grid nor axes\n\n\n\n\n{{&lt;include _CurvyForestGreenTree.R&gt;}}\n\n#install.packages('ggplot2')\nlibrary('ggplot2')\n#install.packages('GGally')\nlibrary(GGally)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n#ggpairs(mtcars)\nggpairs(mtcars,columns = 1:4,aes(cyl = cyl, alpha = 0.5))\n\nWarning: The following aesthetics were dropped during statistical transformation: cyl\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: cyl\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: cyl\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: cyl\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n\nlibrary(ggplot2)\n\n#Create a sample dataset\ndata &lt;- data.frame(\n  Category = c(\"Category A\", \"Category B\", \"Category C\"),\n  Value1 = c(30-10, 50-10, 20-10),\n  Value2 = c(40, 60, 30)\n)\n\n#Reshape the data to long format for overlapping columns\nlibrary(tidyr)\ndata_long &lt;- pivot_longer(data, cols = starts_with(\"Value\"), names_to = \"Variable\", values_to = \"Value\")\n\n#Create the column chart with slightly overlapping columns\nggplot(data_long, aes(x = Category, y = Value, fill = Variable)) +\n  geom_col(position = position_dodge(width = 0.7)) +  # Adjust the width for overlapping\n  labs(title = \"Overlapping Column Chart\",\n       x = \"Category\",\n       y = \"Value\") +\n  theme_minimal()"
  },
  {
    "objectID": "Assignment1.html",
    "href": "Assignment1.html",
    "title": "Jaelon Braxton",
    "section": "",
    "text": "This is my first assignment!"
  },
  {
    "objectID": "Assignment2.html",
    "href": "Assignment2.html",
    "title": "Jaelon Braxton",
    "section": "",
    "text": "Assignment 2\n\n#install.packages(\"gtrendsR\")\nlibrary(gtrendsR)\n\nWarning: package 'gtrendsR' was built under R version 4.3.2\n\nBidenTrumpElection = gtrends(c(\"Trump\",\"Biden\",\"election\"), time = \"all\")\npar(family=\"Georgia\")\nplot(BidenTrumpElection)\n\n\n\ntg = gtrends(\"transgender\", time = \"all\")\n\n# Example: Transgender, Feminism and Women's rights\n# \nplot(gtrends(c(\"transgender\"), time = \"all\"))\n\n\n\ndata(\"countries\")\nplot(gtrends(c(\"transgender\"), geo = \"GB\", time = \"all\")) \n\n\n\nplot(gtrends(c(\"transgender\"), geo = c(\"US\",\"GB\",\"TW\"), time = \"all\")) \n\n\n\ntg_iot = tg$interest_over_time\ntw = gtrends(c(\"transgender\",\"women right\"), time = \"all\")\ntw1 = data.frame(tw$interest_over_time)\nplot(gtrends(c(\"transgender\",\"women right\",\"feminism\"), time = \"all\"))\n\n\n\ndata(\"categories\")"
  },
  {
    "objectID": "CSV.html",
    "href": "CSV.html",
    "title": "Jaelon Braxton",
    "section": "",
    "text": "My LinkedIn"
  },
  {
    "objectID": "Assignment3.html",
    "href": "Assignment3.html",
    "title": "Jaelon Braxton",
    "section": "",
    "text": "Assignment3\n\nlibrary(quanteda)\n\nWarning in .recacheSubclasses(def@className, def, env): undefined subclass\n\"pcorMatrix\" of class \"replValueSp\"; definition not updated\n\n\nWarning in .recacheSubclasses(def@className, def, env): undefined subclass\n\"pcorMatrix\" of class \"xMatrix\"; definition not updated\n\n\nWarning in .recacheSubclasses(def@className, def, env): undefined subclass\n\"pcorMatrix\" of class \"mMatrix\"; definition not updated\n\n\nPackage version: 3.3.1\nUnicode version: 15.1\nICU version: 74.1\n\n\nParallel computing: 16 of 16 threads used.\n\n\nSee https://quanteda.io for tutorials and examples.\n\nlibrary(quanteda.textmodels)\nlibrary(quanteda.textplots)\nlibrary(readr)\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n# Twitter data about President Biden and Xi summit in Novemeber 2021\n# Do some background search/study on the event\n# \nsummit &lt;- read_csv(\"https://raw.githubusercontent.com/datageneration/datamethods/master/textanalytics/summit_11162021.csv\")\n\nRows: 14520 Columns: 90\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (50): screen_name, text, source, reply_to_screen_name, hashtags, symbol...\ndbl  (26): user_id, status_id, display_text_width, reply_to_status_id, reply...\nlgl  (10): is_quote, is_retweet, quote_count, reply_count, ext_media_type, q...\ndttm  (4): created_at, quoted_created_at, retweet_created_at, account_create...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#View(summit)\n\nsum_twt = summit$text\ntoks = tokens(sum_twt)\nsumtwtdfm &lt;- dfm(toks)\n\n# Latent Semantic Analysis\nsum_lsa &lt;- textmodel_lsa(sumtwtdfm)\nsummary(sum_lsa)\n\n                Length    Class     Mode   \nsk                     10 -none-    numeric\ndocs               145200 -none-    numeric\nfeatures           160930 -none-    numeric\nmatrix_low_rank 233670360 -none-    numeric\ndata            233670360 dgCMatrix S4     \n\ntweet_dfm &lt;- tokens(sum_twt, remove_punct = TRUE) %&gt;%\n  dfm()\nhead(tweet_dfm)\n\nDocument-feature matrix of: 6 documents, 16,026 features (99.89% sparse) and 0 docvars.\n       features\ndocs    breaking news us president biden amp communist china leader xi\n  text1        1    1  1         1     1   1         1     2      1  1\n  text2        0    0  0         0     0   0         0     0      0  0\n  text3        0    0  0         0     1   0         0     0      0  1\n  text4        0    0  0         1     1   0         0     0      0  1\n  text5        0    0  0         0     1   0         0     0      0  1\n  text6        0    0  0         0     1   0         0     0      0  1\n[ reached max_nfeat ... 16,016 more features ]\n\ntag_dfm &lt;- dfm_select(tweet_dfm, pattern = \"#*\")\ntoptag &lt;- names(topfeatures(tag_dfm, 50))\nhead(toptag, 10)\n\n [1] \"#china\"          \"#biden\"          \"#xijinping\"      \"#joebiden\"      \n [5] \"#america\"        \"#americans\"      \"#coronavirus\"    \"#fentanyl\"      \n [9] \"#xi\"             \"#uyghurgenocide\"\n\nlibrary(quanteda.textplots)\ntag_fcm &lt;- fcm(tag_dfm)\nhead(tag_fcm)\n\nFeature co-occurrence matrix of: 6 by 685 features.\n               features\nfeatures        #breaking #breakingnews #biden #china #usa #pray4america\n  #breaking             0             4      4      5    5             0\n  #breakingnews         0             0      4      5    4             0\n  #biden                0             0      0    415   44             0\n  #china                0             0      0      8   76             0\n  #usa                  0             0      0      0    6             0\n  #pray4america         0             0      0      0    0             0\n               features\nfeatures        #joebiden #xijinping #america #americans\n  #breaking             0          0        0          0\n  #breakingnews         0          0        0          0\n  #biden              299        366      301        295\n  #china              339        433      308        295\n  #usa                 12         14        0          0\n  #pray4america         0          0        0          0\n[ reached max_nfeat ... 675 more features ]\n\ntopgat_fcm &lt;- fcm_select(tag_fcm, pattern = toptag)\ntextplot_network(topgat_fcm, min_freq = 50, edge_alpha = 0.8, edge_size = 1)\n\n\n\nuser_dfm &lt;- dfm_select(tweet_dfm, pattern = \"@*\")\ntopuser &lt;- names(topfeatures(user_dfm, 50))\nhead(topuser, 20)\n\n [1] \"@potus\"           \"@joebiden\"        \"@politico\"        \"@eneskanter\"     \n [5] \"@jendeben\"        \"@nwadhams\"        \"@nba\"             \"@washwizards\"    \n [9] \"@pelicansnba\"     \"@capitalonearena\" \"@kevinliptakcnn\"  \"@foxbusiness\"    \n[13] \"@morningsmaria\"   \"@scmpnews\"        \"@uyghur_american\" \"@nytimes\"        \n[17] \"@petermartin_pcm\" \"@nahaltoosi\"      \"@phelimkine\"      \"@kaylatausche\"   \n\nuser_fcm &lt;- fcm(user_dfm)\nhead(user_fcm, 20)\n\nFeature co-occurrence matrix of: 20 by 741 features.\n                 features\nfeatures          @youtube @bfmtv @cnn @lauhaim @barackobama @joebiden\n  @youtube               0      0    0        0            0         0\n  @bfmtv                 0      0    1        1            1         1\n  @cnn                   0      0    0        1            1         1\n  @lauhaim               0      0    0        0            1         1\n  @barackobama           0      0    0        0            0         1\n  @joebiden              0      0    0        0            0         3\n  @kamalaharris          0      0    0        0            0         0\n  @hillaryclinton        0      0    0        0            0         0\n  @billclinton           0      0    0        0            0         0\n  @cbsnews               0      0    0        0            0         0\n                 features\nfeatures          @kamalaharris @hillaryclinton @billclinton @cbsnews\n  @youtube                    0               0            0        0\n  @bfmtv                      1               1            1        1\n  @cnn                        1               1            1        1\n  @lauhaim                    1               1            1        1\n  @barackobama                1               1            1        1\n  @joebiden                   1               1            1        1\n  @kamalaharris               0               1            1        1\n  @hillaryclinton             0               0            1        1\n  @billclinton                0               0            0        1\n  @cbsnews                    0               0            0        0\n[ reached max_feat ... 10 more features, reached max_nfeat ... 731 more features ]\n\nuser_fcm &lt;- fcm_select(user_fcm, pattern = topuser)\ntextplot_network(user_fcm, min_freq = 20, edge_color = \"firebrick\", edge_alpha = 0.8, edge_size = 1)\n\n\n\n# American Presidential speeches\n# Example extracted from https://quanteda.io/articles/pkgdown/examples/plotting.html\n \nlibrary(quanteda.textstats)\n\nWarning in .recacheSubclasses(def@className, def, env): undefined subclass\n\"pcorMatrix\" of class \"replValueSp\"; definition not updated\n\n\nWarning in .recacheSubclasses(def@className, def, env): undefined subclass\n\"pcorMatrix\" of class \"xMatrix\"; definition not updated\n\n\nWarning in .recacheSubclasses(def@className, def, env): undefined subclass\n\"pcorMatrix\" of class \"mMatrix\"; definition not updated\n\ndata_corpus_inaugural_subset &lt;- \ncorpus_subset(data_corpus_inaugural, Year &gt; 1949)\nkwic(tokens(data_corpus_inaugural_subset), pattern = \"american\") %&gt;%\n  textplot_xray()\n\n\n\ntextplot_xray(\n  kwic(data_corpus_inaugural_subset, pattern = \"american\"),\n  kwic(data_corpus_inaugural_subset, pattern = \"people\"),\n  kwic(data_corpus_inaugural_subset, pattern = \"communist\")\n)\n\nWarning: 'kwic.corpus()' is deprecated. Use 'tokens()' first.\n\n\nWarning: 'kwic.corpus()' is deprecated. Use 'tokens()' first.\n\nWarning: 'kwic.corpus()' is deprecated. Use 'tokens()' first.\n\n\n\n\ntheme_set(theme_bw())\ng &lt;- textplot_xray(\n  kwic(toks, pattern = \"american\"),\n  kwic(toks, pattern = \"people\"),\n  kwic(toks, pattern = \"communist\")\n)\ng + aes(color = keyword) + \n  scale_color_manual(values = c(\"blue\", \"red\", \"green\")) +\n  theme(legend.position = \"none\")\n\n\n\ng\n\n\n\n\ncode-fold: true\ncode-summary: “Show the code”"
  },
  {
    "objectID": "Assignment6.html",
    "href": "Assignment6.html",
    "title": "Jaelon Braxton",
    "section": "",
    "text": "Here is the data I was able to scrape from CNN’s Youtube channel with Tuber."
  },
  {
    "objectID": "AssignmentDV1.html",
    "href": "AssignmentDV1.html",
    "title": "Jaelon Braxton",
    "section": "",
    "text": "# Assignment 1\n# Credit: https://fronkonstin.com\n\n# Install packages\n\n# install.packages(\"gsubfn\")\n# nstall.packages(\"tidyverse\")\nlibrary(gsubfn)\n\nLoading required package: proto\n\nlibrary(tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Define elements in plant art\n# Each image corresponds to a different axiom, rules, angle and depth\n\n# Leaf of Fall\n\naxiom=\"X\"\nrules=list(\"X\"=\"F-[[X]+X]+F[+FX]-X\", \"F\"=\"FF\")\nangle=22.5\ndepth=6\n\ny=1\nx=1\nfor (i in 1:depth) axiom=gsubfn(\".\", rules, axiom)\n\nactions=str_extract_all(axiom, \"\\\\d*\\\\+|\\\\d*\\\\-|F|L|R|\\\\[|\\\\]|\\\\|\") %&gt;% unlist\n\nstatus=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))\npoints=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)\n\n\n# Generating data\n# Note: may take a minute or two\n\nfor (action in actions)\n{\n  if (action==\"F\")\n  {\n    x=points[1, \"x1\"]+cos(points[1, \"alfa\"]*(pi/180+(y+(y/x))))\n    y=points[1, \"y1\"]+sin(points[1, \"alfa\"]*(pi/180))\n    points[1,\"x2\"]=x\n    points[1,\"y2\"]=y\n    data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,\n               alfa=points[1, \"alfa\"],\n               depth=points[1,\"depth\"]) %&gt;% rbind(points)-&gt;points\n  }\n  if (action %in% c(\"+\", \"-\")){\n    alfa=points[1, \"alfa\"]\n    points[1, \"alfa\"]=eval(parse(text=paste0(\"alfa\",action, angle)))\n  }\n  if(action==\"[\"){\n    data.frame(x=points[1, \"x1\"], y=points[1, \"y1\"], alfa=points[1, \"alfa\"]) %&gt;%\n      rbind(status) -&gt; status\n    points[1, \"depth\"]=points[1, \"depth\"]+1\n  }\n  \n  if(action==\"]\"){\n    depth=points[1, \"depth\"]\n    points[-1,]-&gt;points\n    data.frame(x1=status[1, \"x\"], y1=status[1, \"y\"], x2=NA, y2=NA,\n               alfa=status[1, \"alfa\"],\n               depth=depth-1) %&gt;%\n      rbind(points) -&gt; points\n    status[-1,]-&gt;status\n  }\n}\n\nggplot() +\n  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),\n               lineend = \"round\",\n               color = \"orange\", # Set your own Fall color?\n               data=na.omit(points)) +\n  coord_fixed(ratio = .2) +\n  theme_void() # No grid nor axes"
  },
  {
    "objectID": "Assignmen5.html",
    "href": "Assignmen5.html",
    "title": "Jaelon Braxton",
    "section": "",
    "text": "Here is the data I was able to scrape from CNN’s Youtube channel with Tuber."
  }
]